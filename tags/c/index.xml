<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hartje.io â€“ C</title><link>https://hartje.io/tags/c/</link><description>Recent content in C on hartje.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Mar 2022 10:44:43 -0600</lastBuildDate><atom:link href="https://hartje.io/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Sockets</title><link>https://hartje.io/blog/unix_sockets/</link><pubDate>Fri, 04 Mar 2022 10:44:43 -0600</pubDate><guid>https://hartje.io/blog/unix_sockets/</guid><description>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>If you&amp;rsquo;ve ever used &lt;code>netstat&lt;/code>, or gone to a website on OSX or Linux (or Windows for that matter) without a background in C (or perhaps systems programming), you may have struggled to fully appreciate the content there in. Or maybe you are just curious to know how &lt;code>sockets&lt;/code> work in *nix.&lt;/p>
&lt;p>&lt;code>sockets&lt;/code> are a form of &lt;code>IPC&lt;/code>, or inter process communication, allowing processes to bidirectionally share information with other processes. See other kinds of IPC in &lt;a href="https://beej.us/guide/bgipc/html/multi/index.html">Beej&amp;rsquo;s Guide to Unix IPC&lt;/a>.&lt;/p>
&lt;p>&lt;code>sockets&lt;/code> are commonly referred to by their &lt;em>Address Family&lt;/em>, seen in constants such as &lt;code>AF_UNIX&lt;/code>, or &lt;code>AF_LOCAL&lt;/code>, representing local sockets specifically. You might also want to know about &lt;em>Protocol Family&lt;/em>, seen in constants such as &lt;code>PF_UNIX&lt;/code> and &lt;code>PF_LOCAL&lt;/code>.&lt;/p>
&lt;p>Valid &lt;code>socket&lt;/code> types that should be known are:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SOCK_STREAM&lt;/code>&lt;/td>
&lt;td>A stream oriented packet used for TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SOCK_DGRAM&lt;/code>&lt;/td>
&lt;td>datagram oriented packet, no reordering, used for UDP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SOCK_RAW&lt;/code>&lt;/td>
&lt;td>Provides access to internal network protocols and interfaces. Only available to super-user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SOCK_SEQPACKET&lt;/code>&lt;/td>
&lt;td>A sequence-packet socket that is connection oriented, delivering messages in the order sent&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can learn more about various types of valid &lt;code>sockets&lt;/code> on the man page for the socket SystemCall:&lt;/p>
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man2/socket.2.html">https://man7.org/linux/man-pages/man2/socket.2.html&lt;/a>&lt;/p>
&lt;p>Now that we&amp;rsquo;ve discussed what &lt;code>sockets&lt;/code> are, and some of the well known constants that sockets use, let&amp;rsquo;s look at the example in the man page.&lt;/p>
&lt;h3 id="unix-socket-example">Unix Socket Example&lt;/h3>
&lt;p>The given snippet in the man page is a bit terse, but practical:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/un.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unix_socket &lt;span style="color:#f92672">=&lt;/span> socket(AF_UNIX, type, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> error &lt;span style="color:#f92672">=&lt;/span> socketpair(AF_UNIX, type, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>sv);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, we import the definitions for socket and unix domain sockets, then construct a unix_socket, and assign error the exit code of calling &lt;code>socketpair&lt;/code>.&lt;/p>
&lt;p>It is helpful to consult the manual, let&amp;rsquo;s take a look at the two syscall signatures from their respective man pages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">socket&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> domain, &lt;span style="color:#66d9ef">int&lt;/span> type, &lt;span style="color:#66d9ef">int&lt;/span> protocol);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">socketpair&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> domain, &lt;span style="color:#66d9ef">int&lt;/span> type, &lt;span style="color:#66d9ef">int&lt;/span> protocol, &lt;span style="color:#66d9ef">int&lt;/span> sv[&lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/socket.2.html">socket&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/socketpair.2.html">socketpair&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Using what we&amp;rsquo;ve learned about valid types, we can construct a simple program that creates a socket, and prints its file descriptors or any relevant error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/un.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> unix_socket, error;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// socket vector, sv, is a vector pointer to two file descriptors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// representing new sockets for server and client bindings
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>sv[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unix_socket &lt;span style="color:#f92672">=&lt;/span> socket(AF_UNIX, SOCK_DGRAM, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// socketpair below is constructed for the OSX variant. The linux variant has a different signature, instead use:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// error = socketpair(AF_UNIX, 0, *sv)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> error &lt;span style="color:#f92672">=&lt;/span> socketpair(AF_UNIX, SOCK_DGRAM, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>sv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (error &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Encountered error: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, error);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> error;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Socket descriptor: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, unix_socket);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compiling and running our example can be done by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>clang -o socket ./socket.c; ./socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Socket descriptor: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok, so we created a socket, and it returned a descriptor, &lt;code>3&lt;/code>. What does that mean?&lt;/p>
&lt;p>You are likely familiar with file descriptors 0, 1, 2 if you&amp;rsquo;ve ever redirected output. They are &lt;code>stdin&lt;/code>, &lt;code>stdout&lt;/code>, and &lt;code>stderr&lt;/code>.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://beej.us/guide/bgipc/html/multi/index.html">Beej&amp;rsquo;s Guide to Unix IPC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man7/unix.7.html">unix-7 man page&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/socket.2.html">socket-2 man page&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Unix_domain_socket">unix domain socket wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets">What&amp;rsquo;s the difference between Unix sockets and TCP/IP sockets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/File_descriptor#:~:text=On%20Linux%2C%20the%20set%20of,%2Ffd%2F2%20is%20stderr%20.">File Descriptors&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>